#define card_size 5         /* Need 5 bits to have 32 unique cards */
#define num_cards 32        /* 4 shades each with 8 values */
#define num_out_cards 20    /* 20 cards needed for 5 draw poker */
#define deck_size 160       /* 5 bits * 32 cards = 160 bits */
#define out_deck_size 100   /* 5 bits * 20 cards = 100 bits */

typedef uint_t 8 int

typedef uint_t card_size CARD
typedef uint_t deck_size DECK
typedef uint_t out_deck_size SEED
typedef uint_t out_deck_size OUT_DECK

#parties 2

#input 1 SEED
#output 1 OUT_DECK
#input 2 SEED
#output 2 OUT_DECK

/*
 * Reads randomness from inputs to seed array.
 */
function SEED initSeed(SEED s1, SEED s2) {
    return s1 ^ s2;
}

/*
 * Initialize deck to contain 1-32.
 * Input seed is ignored. Used to trigger compiler to initialize
 * function usage.
 */
function DECK initDeck(SEED _) {
    DECK deck = 0;

    deck{0:card_size} = 0;
    deck{5:card_size} = 1;
    deck{10:card_size} = 2;
    deck{15:card_size} = 3;
    deck{20:card_size} = 4;
    deck{25:card_size} = 5;
    deck{30:card_size} = 6;
    deck{35:card_size} = 7;
    deck{40:card_size} = 8;
    deck{45:card_size} = 9;
    deck{50:card_size} = 10;
    deck{55:card_size} = 11;
    deck{60:card_size} = 12;
    deck{65:card_size} = 13;
    deck{70:card_size} = 14;
    deck{75:card_size} = 15;
    deck{80:card_size} = 16;
    deck{85:card_size} = 17;
    deck{90:card_size} = 18;
    deck{95:card_size} = 19;
    deck{100:card_size} = 20;
    deck{105:card_size} = 21;
    deck{110:card_size} = 22;
    deck{115:card_size} = 23;
    deck{120:card_size} = 24;
    deck{125:card_size} = 25;
    deck{130:card_size} = 26;
    deck{135:card_size} = 27;
    deck{140:card_size} = 28;
    deck{145:card_size} = 29;
    deck{150:card_size} = 30;
    deck{155:card_size} = 31;

    return deck;
}

/*
 * Shuffling deck according to seed
 */
function DECK shuffleDeck(SEED seed, DECK deck) {
    CARD card = 0;
    CARD s31 = 0;
    CARD s30 = 0;
    CARD s29 = 0;
    CARD s28 = 0;
    CARD s27 = 0;
    CARD s26 = 0;
    CARD s25 = 0;
    CARD s24 = 0;
    CARD s23 = 0;
    CARD s22 = 0;
    CARD s21 = 0;
    CARD s20 = 0;
    CARD s19 = 0;
    CARD s18 = 0;
    CARD s17 = 0;
    CARD s16 = 0;
    CARD s15 = 0;
    CARD s14 = 0;
    CARD s13 = 0;
    CARD s12 = 0;
    CARD s11 = 0;
    CARD s10 = 0;
    CARD s9 = 0;
    CARD s8 = 0;
    CARD s7 = 0;
    CARD s6 = 0;
    CARD s5 = 0;
    CARD s4 = 0;
    CARD s3 = 0;
    CARD s2 = 0;
    CARD s1 = 0;
    CARD s0 = 0;

    CARD pos = 0;
    CARD pos2 = 0;

    for (CARD i = 0; i < num_out_cards; ++i) {
        /*
         * Statically swapping deck[i] and deck[s]
         */
        pos = i * 5;
        card = deck{pos:card_size};

        s31 = seed{pos:card_size} ^ 31;
        s30 = seed{pos:card_size} ^ 30;
        s29 = seed{pos:card_size} ^ 29;
        s28 = seed{pos:card_size} ^ 28;
        s27 = seed{pos:card_size} ^ 27;
        s26 = seed{pos:card_size} ^ 26;
        s25 = seed{pos:card_size} ^ 25;
        s24 = seed{pos:card_size} ^ 24;
        s23 = seed{pos:card_size} ^ 23;
        s22 = seed{pos:card_size} ^ 22;
        s21 = seed{pos:card_size} ^ 21;
        s20 = seed{pos:card_size} ^ 20;
        s19 = seed{pos:card_size} ^ 19;
        s18 = seed{pos:card_size} ^ 18;
        s17 = seed{pos:card_size} ^ 17;
        s16 = seed{pos:card_size} ^ 16;
        s15 = seed{pos:card_size} ^ 15;
        s14 = seed{pos:card_size} ^ 14;
        s13 = seed{pos:card_size} ^ 13;
        s12 = seed{pos:card_size} ^ 12;
        s11 = seed{pos:card_size} ^ 11;
        s10 = seed{pos:card_size} ^ 10;
        s9 = seed{pos:card_size} ^ 9;
        s8 = seed{pos:card_size} ^ 8;
        s7 = seed{pos:card_size} ^ 7;
        s6 = seed{pos:card_size} ^ 6;
        s5 = seed{pos:card_size} ^ 5;
        s4 = seed{pos:card_size} ^ 4;
        s3 = seed{pos:card_size} ^ 3;
        s2 = seed{pos:card_size} ^ 2;
        s1 = seed{pos:card_size} ^ 1;
        s0 = seed{pos:card_size} ^ 0;


        if (0 == s31) {
            deck{pos:card_size} = deck{155:card_size};
            deck{155:card_size} = card;
        } else {
        if (0 == s30) {
            deck{pos:card_size} = deck{150:card_size};
            deck{150:card_size} = card;
        } else {
        if (0 == s29) {
            deck{pos:card_size} = deck{145:card_size};
            deck{145:card_size} = card;
        } else {
        if (0 == s28) {
            deck{pos:card_size} = deck{140:card_size};
            deck{140:card_size} = card;
        } else {
        if (0 == s27) {
            deck{pos:card_size} = deck{135:card_size};
            deck{135:card_size} = card;
        } else {
        if (0 == s26) {
            deck{pos:card_size} = deck{130:card_size};
            deck{130:card_size} = card;
        } else {
        if (0 == s25) {
            deck{pos:card_size} = deck{125:card_size};
            deck{125:card_size} = card;
        } else {
        if (0 == s24) {
            deck{pos:card_size} = deck{120:card_size};
            deck{120:card_size} = card;
        } else {
        if (0 == s23) {
            deck{pos:card_size} = deck{115:card_size};
            deck{115:card_size} = card;
        } else {
        if (0 == s22) {
            deck{pos:card_size} = deck{110:card_size};
            deck{110:card_size} = card;
        } else {
        if (0 == s21) {
            deck{pos:card_size} = deck{105:card_size};
            deck{105:card_size} = card;
        } else {
        if (0 == s20) {
            deck{pos:card_size} = deck{100:card_size};
            deck{100:card_size} = card;
        } else {
        if (0 == s19) {
            deck{pos:card_size} = deck{95:card_size};
            deck{95:card_size} = card;
        } else {
        if (0 == s18) {
            deck{pos:card_size} = deck{90:card_size};
            deck{90:card_size} = card;
        } else {
        if (0 == s17) {
            deck{pos:card_size} = deck{85:card_size};
            deck{85:card_size} = card;
        } else {
        if (0 == s16) {
            deck{pos:card_size} = deck{80:card_size};
            deck{80:card_size} = card;
        } else {
        if (0 == s15) {
            deck{pos:card_size} = deck{75:card_size};
            deck{75:card_size} = card;
        } else {
        if (0 == s14) {
            deck{pos:card_size} = deck{70:card_size};
            deck{70:card_size} = card;
        } else {
        if (0 == s13) {
            deck{pos:card_size} = deck{65:card_size};
            deck{65:card_size} = card;
        } else {
        if (0 == s12) {
            deck{pos:card_size} = deck{60:card_size};
            deck{60:card_size} = card;
        } else {
        if (0 == s11) {
            deck{pos:card_size} = deck{55:card_size};
            deck{55:card_size} = card;
        } else {
        if (0 == s10) {
            deck{pos:card_size} = deck{50:card_size};
            deck{50:card_size} = card;
        } else {
        if (0 == s9) {
            deck{pos:card_size} = deck{45:card_size};
            deck{45:card_size} = card;
        } else {
        if (0 == s8) {
            deck{pos:card_size} = deck{40:card_size};
            deck{40:card_size} = card;
        } else {
        if (0 == s7) {
            deck{pos:card_size} = deck{35:card_size};
            deck{35:card_size} = card;
        } else {
        if (0 == s6) {
            deck{pos:card_size} = deck{30:card_size};
            deck{30:card_size} = card;
        } else {
        if (0 == s5) {
            deck{pos:card_size} = deck{25:card_size};
            deck{25:card_size} = card;
        } else {
        if (0 == s4) {
            deck{pos:card_size} = deck{20:card_size};
            deck{20:card_size} = card;
        } else {
        if (0 == s3) {
            deck{pos:card_size} = deck{15:card_size};
            deck{15:card_size} = card;
        } else {
        if (0 == s2) {
            deck{pos:card_size} = deck{10:card_size};
            deck{10:card_size} = card;
        } else {
        if (0 == s1) {
            deck{pos:card_size} = deck{5:card_size};
            deck{5:card_size} = card;
        } else {
        if (0 == s0) {
            deck{pos:card_size} = deck{0:card_size};
            deck{0:card_size} = card;
        }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
    }

    return deck;
}


/*
 * Finalizing output by writing array to bits
 */
function OUT_DECK finalizeDeck(DECK deck) {
    return deck{0:out_deck_size};
}

function void main() {
    SEED seed;
    seed = initSeed(input1, input2);

    DECK deck;
    deck = initDeck(seed);
    deck = shuffleDeck(seed, deck);

    output1 = finalizeDeck(deck);
}
