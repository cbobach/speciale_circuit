#define card_size 6
#define num_cards 52
#define num_out_cards 20
#define seed_size (card_size * num_out_cards)
#define deck_size (card_size * num_cards)

typedef uint_t 9 uint
typedef uint_t 1 bool
typedef uint_t seed_size SEED
typedef uint_t card_size CARD
typedef uint_t deck_size DECK

#parties 2

#input 1 SEED
#output 1 DECK
#input 2 SEED
#output 2 DECK

#include "add_seed.wir"
#include "geq_seed.wir"
#include "init_deck.wir"

function DECK shuffleDeck(DECK deck, SEED seed) {
    uint s = 0;
    bool x;
    bool y;
    bool a_in;
    bool a_out;

    uint card1_pos;
    uint card2_pos;


    for (uint i = 0; i < num_out_cards; ++i) {
        card1_pos = i * card_size;

        s{0:card_size} = i{0:card_size} + seed{card1_pos:card_size};

        if (s == 0) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{0 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{0 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 1) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{1 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{1 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 2) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{2 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{2 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 3) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{3 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{3 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 4) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{4 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{4 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 5) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{5 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{5 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 6) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{6 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{6 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 7) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{7 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{7 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 8) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{8 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{8 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 9) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{9 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{9 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 10) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{10 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{10 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 11) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{11 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{11 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 12) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{12 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{12 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 13) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{13 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{13 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 14) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{14 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{14 * card_size + k} = y ^ a_out;
            }
        }

        if (s == 15) {
            for (uint k = 0; k < card_size; ++k) {
                x = deck{card1_pos + k};
                y = deck{15 * card_size + k};

                a_in = x ^ y;
                a_out = 1 & a_in;

                deck{card1_pos + k} = x ^ a_out;
                deck{15 * card_size + k} = y ^ a_out;
            }
        }

/*
if (s == 16) {
for (uint k = 0; k < card_size; ++k) {
x = deck{card1_pos + k};
y = deck{16 * card_size + k};

a_in = x ^ y;
a_out = 1 & a_in;

deck{card1_pos + k} = x ^ a_out;
deck{16 * card_size + k} = y ^ a_out;
}
}

if (s == 17) {
for (uint k = 0; k < card_size; ++k) {
x = deck{card1_pos + k};
y = deck{17 * card_size + k};

a_in = x ^ y;
a_out = 1 & a_in;

deck{card1_pos + k} = x ^ a_out;
deck{17 * card_size + k} = y ^ a_out;
}
}

if (s == 18) {
for (uint k = 0; k < card_size; ++k) {
x = deck{card1_pos + k};
y = deck{18 * card_size + k};

a_in = x ^ y;
a_out = 1 & a_in;

deck{card1_pos + k} = x ^ a_out;
deck{18 * card_size + k} = y ^ a_out;
}
}

if (s == 19) {
for (uint k = 0; k < card_size; ++k) {
x = deck{card1_pos + k};
y = deck{19 * card_size + k};

a_in = x ^ y;
a_out = 1 & a_in;

deck{card1_pos + k} = x ^ a_out;
deck{19 * card_size + k} = y ^ a_out;
}
}
*/

/*
        b = s == 3;
        if (b) {
            deck{j:card_size} = deck{3*card_size:card_size};
            deck{3*card_size:card_size} = card;
        }
        b = s == 4;
        if (b) {
            deck{j:card_size} = deck{4*card_size:card_size};
            deck{4*card_size:card_size} = card;
        }
        b = s == 5;
        if (b) {
            deck{j:card_size} = deck{5*card_size:card_size};
            deck{5*card_size:card_size} = card;
        }
        b = s == 6;
        if (b) {
            deck{j:card_size} = deck{6*card_size:card_size};
            deck{6*card_size:card_size} = card;
        }
        b = s == 7;
        if (b) {
            deck{j:card_size} = deck{7*card_size:card_size};
            deck{7*card_size:card_size} = card;
        }
        b = s == 8;
        if (b) {
            deck{j:card_size} = deck{8*card_size:card_size};
            deck{8*card_size:card_size} = card;
        }
        b = s == 9;
        if (b) {
            deck{j:card_size} = deck{9*card_size:card_size};
            deck{9*card_size:card_size} = card;
        }
        b = s == 10;
        if (b) {
            deck{j:card_size} = deck{10*card_size:card_size};
            deck{10*card_size:card_size} = card;
        }
        b = s == 11;
        if (b) {
            deck{j:card_size} = deck{11*card_size:card_size};
            deck{11*card_size:card_size} = card;
        }
        b = s == 12;
        if (b) {
            deck{j:card_size} = deck{12*card_size:card_size};
            deck{12*card_size:card_size} = card;
        }
        b = s == 13;
        if (b) {
            deck{j:card_size} = deck{13*card_size:card_size};
            deck{13*card_size:card_size} = card;
        }
        b = s == 14;
        if (b) {
            deck{j:card_size} = deck{14*card_size:card_size};
            deck{14*card_size:card_size} = card;
        }
        b = s == 15;
        if (b) {
            deck{j:card_size} = deck{15*card_size:card_size};
            deck{15*card_size:card_size} = card;
        }
        b = s == 16;
        if (b) {
            deck{j:card_size} = deck{16*card_size:card_size};
            deck{16*card_size:card_size} = card;
        }
        b = s == 17;
        if (b) {
            deck{j:card_size} = deck{17*card_size:card_size};
            deck{17*card_size:card_size} = card;
        }
        b = s == 18;
        if (b) {
            deck{j:card_size} = deck{18*card_size:card_size};
            deck{18*card_size:card_size} = card;
        }
        b = s == 19;
        if (b) {
            deck{j:card_size} = deck{19*card_size:card_size};
            deck{19*card_size:card_size} = card;
        }
        b = s == 20;
        if (b) {
            deck{j:card_size} = deck{20*card_size:card_size};
            deck{20*card_size:card_size} = card;
        }
        b = s == 21;
        if (b) {
            deck{j:card_size} = deck{21*card_size:card_size};
            deck{21*card_size:card_size} = card;
        }
        b = s == 22;
        if (b) {
            deck{j:card_size} = deck{22*card_size:card_size};
            deck{22*card_size:card_size} = card;
        }
        b = s == 23;
        if (b) {
            deck{j:card_size} = deck{23*card_size:card_size};
            deck{23*card_size:card_size} = card;
        }
        b = s == 24;
        if (b) {
            deck{j:card_size} = deck{24*card_size:card_size};
            deck{24*card_size:card_size} = card;
        }
        b = s == 25;
        if (b) {
            deck{j:card_size} = deck{25*card_size:card_size};
            deck{25*card_size:card_size} = card;
        }
        b = s == 26;
        if (b) {
            deck{j:card_size} = deck{26*card_size:card_size};
            deck{26*card_size:card_size} = card;
        }
        b = s == 27;
        if (b) {
            deck{j:card_size} = deck{27*card_size:card_size};
            deck{27*card_size:card_size} = card;
        }
        b = s == 28;
        if (b) {
            deck{j:card_size} = deck{28*card_size:card_size};
            deck{28*card_size:card_size} = card;
        }
        b = s == 29;
        if (b) {
            deck{j:card_size} = deck{29*card_size:card_size};
            deck{29*card_size:card_size} = card;
        }
        b = s == 30;
        if (b) {
            deck{j:card_size} = deck{30*card_size:card_size};
            deck{30*card_size:card_size} = card;
        }
        b = s == 31;
        if (b) {
            deck{j:card_size} = deck{31*card_size:card_size};
            deck{31*card_size:card_size} = card;
        }
        b = s == 32;
        if (b) {
            deck{j:card_size} = deck{32*card_size:card_size};
            deck{32*card_size:card_size} = card;
        }
        b = s == 33;
        if (b) {
            deck{j:card_size} = deck{33*card_size:card_size};
            deck{33*card_size:card_size} = card;
        }
        b = s == 34;
        if (b) {
            deck{j:card_size} = deck{34*card_size:card_size};
            deck{34*card_size:card_size} = card;
        }
        b = s == 35;
        if (b) {
            deck{j:card_size} = deck{35*card_size:card_size};
            deck{35*card_size:card_size} = card;
        }
        b = s == 36;
        if (b) {
            deck{j:card_size} = deck{36*card_size:card_size};
            deck{36*card_size:card_size} = card;
        }
        b = s == 37;
        if (b) {
            deck{j:card_size} = deck{37*card_size:card_size};
            deck{37*card_size:card_size} = card;
        }
        b = s == 38;
        if (b) {
            deck{j:card_size} = deck{38*card_size:card_size};
            deck{38*card_size:card_size} = card;
        }
        b = s == 39;
        if (b) {
            deck{j:card_size} = deck{39*card_size:card_size};
            deck{39*card_size:card_size} = card;
        }
        b = s == 40;
        if (b) {
            deck{j:card_size} = deck{40*card_size:card_size};
            deck{40*card_size:card_size} = card;
        }
        b = s == 41;
        if (b) {
            deck{j:card_size} = deck{41*card_size:card_size};
            deck{41*card_size:card_size} = card;
        }
        b = s == 42;
        if (b) {
            deck{j:card_size} = deck{42*card_size:card_size};
            deck{42*card_size:card_size} = card;
        }
        b = s == 43;
        if (b) {
            deck{j:card_size} = deck{43*card_size:card_size};
            deck{43*card_size:card_size} = card;
        }
        b = s == 44;
        if (b) {
            deck{j:card_size} = deck{44*card_size:card_size};
            deck{44*card_size:card_size} = card;
        }
        b = s == 45;
        if (b) {
            deck{j:card_size} = deck{45*card_size:card_size};
            deck{45*card_size:card_size} = card;
        }
        b = s == 46;
        if (b) {
            deck{j:card_size} = deck{46*card_size:card_size};
            deck{46*card_size:card_size} = card;
        }
        b = s == 47;
        if (b) {
            deck{j:card_size} = deck{47*card_size:card_size};
            deck{47*card_size:card_size} = card;
        }
        b = s == 48;
        if (b) {
            deck{j:card_size} = deck{48*card_size:card_size};
            deck{48*card_size:card_size} = card;
        }
        b = s == 49;
        if (b) {
            deck{j:card_size} = deck{49*card_size:card_size};
            deck{49*card_size:card_size} = card;
        }
        b = s == 50;
        if (b) {
            deck{j:card_size} = deck{50*card_size:card_size};
            deck{50*card_size:card_size} = card;
        }
        b = s == 51;
        if (b) {
            deck{j:card_size} = deck{51*card_size:card_size};
            deck{51*card_size:card_size} = card;
        }
*/

    }

    return deck;
}

function void main() {
    SEED seed = addSeed(input1, input2);
    seed = geqSeed(seed);

    DECK deck = initDeck(input1);

    output1 = shuffleDeck(deck, seed);
}